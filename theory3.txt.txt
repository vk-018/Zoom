1. Create 2 folders Bakcend and front End
(i)- create json file in backend(with type: module), and install req modules  [express, mongoose,brypt,http-status,socket.io,npm i cors --save]
    -> The http-status-codes npm package helps developers write cleaner, self-explanatory server responses by replacing raw numbers like 404 or 500 with readable constants like StatusCodes.NOT_FOUND.

2. setup Database at mongo Atlas  -> create new project
                                 -> create cluster
                                 -> now at cluster add ip 0.0.0.0/0  as ip to access it from amy ip(only for test)
                                 -> 
3. Create Directory:-
(i)- inside backend : src-> then m,v,c folders and app.js

4. open appjs and import
(i)-  import { createServer } from "node:http";
Node.js has a built-in HTTP module that allows you to create servers.
createServer() is a function that:
Creates an HTTP server
Handles incoming HTTP requests (GET, POST, etc.)
Can be used as the foundation for WebSockets (like Socket.IO)

Socket.IO requires an underlying HTTP server to attach to.
Even if you’re not serving web pages, you still need an HTTP server to handle the WebSocket connections.

(ii)- 2. import { Server } from "socket.io";

Server is the main Socket.IO class for real-time communication.

It allows you to:
Accept WebSocket connections from clients
Send/receive events instantly (e.g., chat messages, notifications)
Handle multiple connected clients easily
Server wraps your HTTP server and adds real-time, bidirectional communication capabilities.

(iii)3. import cors from "cors";
cors is a middleware for Cross-Origin Resource Sharing.
It allows your server to accept requests from different origins (domains, ports).
Without CORS, browsers block frontend apps from accessing your backend if they are on different ports (e.g., frontend: localhost:3000, backend: localhost:5000).

5. Create shortcutes by editing script in package.json
package.json called "scripts", and it’s used to define shortcuts for running commands related to your Node.js project. 
use npm run dev and npm start and npm run prod
we already know node and nodemon
Purpose: Run your app in production mode with process management.

pm2 is a process manager for Node.js apps that:
Keeps your app running even if it crashes
Handles logging, monitoring, and scaling

6. make a different page in controller to handle socket
(i)- we ill create a differnet server using http-node to handle both server and socket intances
(ii)- the we will run this new created server not the app(server.listen)

7. connect databse from mongo Atlas

8. add cors,json parsing and urlendoed to accept from data
9. create router to handle similar path requests
10. create uttiliies like WrapAsync, fns related to jwt
11. we will use JwT for authentication:-
    -> first make register route
    -> then login route: in the login route create a random text using cypto.randomBytes(size).toString("hex"); and store it in the token field of the user document....it will be used 
      for verification in some cases.   eg. forget password, by using this we can avoid exposing some vulnerable info to the local storage,
      we can directly access the info from databse using this token , no need of putting real data in local storage
      
     so we will use two tokens

JWT → for authentication (short-lived access token)
Random token (crypto) → for refresh or verification (long-lived, stored in DB)
This pattern is called JWT + Refresh Token authentication,

12. then after writing sifn up and sign in routes we move to WebSockets
13. Write complete logic for sockets  (connect ,disconnect, chat)
14. handle Cors for Socket (it shd be done separately even cors has already been used with app)
bcoz

app.use(cors(...))
Only affects Express/HTTP routes (app.get(), app.post(), etc.).
Adds CORS headers to HTTP responses.

Does NOT affect WebSocket connections, because after the initial handshake, Socket.IO/WebSocket communication doesn’t go through Express middleware.

new Server(server, { cors: ... })
Specifically controls Socket.IO/WebSocket handshake CORS.
The browser checks the Origin header when initiating the WebSocket connection.
Without this, a cross-origin frontend will be blocked from connecting, even if app.use(cors(...)) is present.

15. Write add Activity and get Activity
   -> 














